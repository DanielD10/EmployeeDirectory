{"version":3,"sources":["components/Header/index.js","components/TableRow/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","uk-navbar","href","TableRow","props","name","email","position","number","Table","employees","useState","currentEmployees","setCurrentEmployees","nameRef","useRef","type","placeholder","ref","onClick","e","preventDefault","current","value","newEmployees","filter","item","includes","sort","a","b","map","employee","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAiBeA,MAdf,WACE,OACE,6BACE,yBAAKC,UAAU,gCAAgCC,YAAU,QACvD,yBAAKD,UAAU,kBACb,uBAAGA,UAAU,yBAAyBE,KAAK,KAA3C,0B,aCKKC,MAXf,SAAkBC,GAChB,OACE,4BACE,4BAAKA,EAAMC,MACX,4BAAKD,EAAME,OACX,4BAAKF,EAAMG,UACX,4BAAKH,EAAMI,UCsFFC,MA1Ff,WACE,IAAMC,EAAY,CAChB,CACEL,KAAM,eACNC,MAAO,mBACPC,SAAU,gBACVC,OAAQ,gBAEV,CACEH,KAAM,YACNC,MAAO,iBACPC,SAAU,gBACVC,OAAQ,gBAEV,CACEH,KAAM,aACNC,MAAO,kBACPC,SAAU,WACVC,OAAQ,gBAEV,CACEH,KAAM,aACNC,MAAO,gBACPC,SAAU,WACVC,OAAQ,gBAEV,CACEH,KAAM,gBACNC,MAAO,oBACPC,SAAU,aACVC,OAAQ,gBA9BG,EAkCiCG,mBAASD,GAlC1C,mBAkCRE,EAlCQ,KAkCUC,EAlCV,KAwCTC,EAAUC,mBAUhB,OACE,6BACE,8BACE,2BACEf,UAAU,+BACVgB,KAAK,OACLC,YAAY,QACZC,IAAKJ,IAEP,4BAAQd,UAAU,8BAA8BmB,QAlBtD,SAAoBC,GAChBA,EAAEC,iBACJ,IAAMhB,EAAOS,EAAQQ,QAAQC,MACvBC,EAAed,EAAUe,QAAO,SAASC,GAC3C,OAAOA,EAAKrB,KAAKsB,SAAStB,MAE9BQ,EAAoBW,KAYhB,WAEF,2BAAOxB,UAAU,4CACf,+BACE,4BACE,oCACA,4BACE,4BAAQmB,QA/BpB,WACE,IAAMK,EAAY,UAAOd,GACzBc,EAAaI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEvB,MAAQwB,EAAExB,MAAQ,GAAK,KACtDO,EAAoBW,KA4BV,UAEF,wCACA,wCAGJ,+BACGZ,EAAiBmB,KAAI,SAACC,GACrB,OACE,kBAAC,EAAD,CACE3B,KAAM2B,EAAS3B,KACfC,MAAO0B,EAAS1B,MAChBC,SAAUyB,EAASzB,SACnBC,OAAQwB,EAASxB,OACjByB,IAAKD,EAAS1B,eCvEf4B,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8218473f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <div>\n      <nav className=\"uk-navbar-container uk-margin\" uk-navbar=\"true\">\n        <div className=\"uk-navbar-left\">\n          <a className=\"uk-navbar-item uk-logo\" href=\"/\">\n            Employee Directory\n          </a>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction TableRow(props) {\n  return (\n    <tr>\n      <td>{props.name}</td>\n      <td>{props.email}</td>\n      <td>{props.position}</td>\n      <td>{props.number}</td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n","import React, { useState, useRef } from \"react\";\nimport \"./style.css\";\nimport TableRow from \"../TableRow\";\n\nfunction Table() {\n  const employees = [\n    {\n      name: \"Daniel Duran\",\n      email: \"Daniel@gmail.com\",\n      position: \"Web Developer\",\n      number: \"210-222-2222\",\n    },\n    {\n      name: \"Rick Roll\",\n      email: \"Rick@yahoo.com\",\n      position: \"Web Developer\",\n      number: \"956-444-4444\",\n    },\n    {\n      name: \"James Dean\",\n      email: \"James@gmail.com\",\n      position: \"Engineer\",\n      number: \"210-888-8888\",\n    },\n    {\n      name: \"Sam Smitty\",\n      email: \"Sam@gmail.com\",\n      position: \"Engineer\",\n      number: \"210-999-8228\",\n    },\n    {\n      name: \"Charles latts\",\n      email: \"Charles@yahoo.com\",\n      position: \"Accountant\",\n      number: \"956-333-888\",\n    },\n  ];\n\n  const [currentEmployees, setCurrentEmployees] = useState(employees);\n  function sortEmail() {\n    const newEmployees = [...employees];\n    newEmployees.sort((a, b) => (a.email > b.email ? 1 : -1));\n    setCurrentEmployees(newEmployees);\n  }\n  const nameRef = useRef();\n  function filterName(e){\n      e.preventDefault();\n    const name = nameRef.current.value;\n    const newEmployees = employees.filter(function(item){\n        return item.name.includes(name)\n    })\n    setCurrentEmployees(newEmployees)\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          className=\"uk-input uk-form-width-small\"\n          type=\"text\"\n          placeholder=\"Input\"\n          ref={nameRef}\n        />\n        <button className=\"uk-button uk-button-default\" onClick={filterName}>Button</button>\n      </form>\n      <table className=\"uk-table uk-table-hover uk-table-divider\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>\n              <button onClick={sortEmail}>Email</button>\n            </th>\n            <th>Position</th>\n            <th>Number</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentEmployees.map((employee) => {\n            return (\n              <TableRow\n                name={employee.name}\n                email={employee.email}\n                position={employee.position}\n                number={employee.number}\n                key={employee.email}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}